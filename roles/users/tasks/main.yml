---
# For debuging, list groups name
- name: debug variable group_names
  debug: var=group_names
  when: debug_enabled_default | bool

# For debuging, list users name
- name: debug variable users
  debug: var=users
  when: debug_enabled_default | bool

# Check primarygroup is present
- name: Add group | create primary group before adding user to group
  group:
    name: "{{ item.primarygroup }}"
    gid: "{{ item.primarygid | default(omit) }}"
    state: present
  when: item.primarygroup is defined and item.servers | intersect(group_names)
  loop: '{{ users }}'
  loop_control:
    label: "primarygroup: {{ item.primarygroup if item.primarygroup is defined else '' }}, primarygid: {{ item.primarygid if item.primarygid is defined else 'default' }}" # noqa 204

# Get unique list of groups to create on the server only when group var is defined (var is different on each server)
- name: set_fact - get groups as list per server
  set_fact:
    groups_as_list: "{{ (groups_as_list|default([]) + item.groups.split(','))|map('trim')|list|sort|unique }}"
  loop: '{{ users }}'
  when: item.groups is defined and item.servers | intersect(group_names)
  loop_control:
    label: "username: {{ item.username }}, groups_as_list: {{ item.groups if item.groups is defined else '' }}"

# For debuging, list all groups in the server only when group var is defined
- name: debug show groups_as_list
  debug: var=groups_as_list
  when: debug_enabled_default | bool

# Add all needed groups in the server only when group var is defined
- name: Add group | create groups before adding user to group
  group:
    name: "{{ item }}"
    state: present
  when: groups_as_list is defined
  loop: "{{ groups_as_list }}"
  loop_control:
    label: "groups: {{ item }}"

# Check/Create the user is present on a particular server!
- name: Add users | create users, shell, home dirs
  user:
    name: "{{ item.username }}"
    uid: "{{ item.uid | default(omit, True) }}"
    password: "{{ item.password if item.password is defined else lookup('password', 'credentials/' + item.username + '/password.txt encrypt=md5_crypt') }}"
    update_password: "{{ item.update_password if item.update_password is defined else default_update_password }}"
    group: "{{ item.primarygroup | default(omit) }}"
    groups: "{{ item.groups | default(omit) }}"
    shell: "{{ item.shell if item.shell is defined else default_shell }}"
    createhome: yes
    system: "{{ item.system | default(omit) }}"
    comment: "{{ item.comment if item.comment is defined else '' }}"
    state: present
  when: (item.user_state == 'present' or item.user_state == 'lock') and item.servers | intersect(group_names)
  loop: '{{ users }}'
  loop_control:
    label: "username: {{ item.username }}, user_state: {{ item.user_state }}, password: {{ 'True' if item.password is defined else 'False' }}, update_password: {{ item.update_password if item.update_password is defined else default_update_password }}, primarygroup: {{ item.primarygroup if item.primarygroup is defined else ''}}, groups: {{ item.groups if item.groups is defined else ''}}, servers: {{ item.servers if item.servers is defined else '' }}, group_names: {{ group_names }}" # noqa 204

# Unlock the user if it is locked!
- name: Add users | Unlock password login (set expiry to -1)
  user:
    name: "{{ item.username }}"
    expires: -1
  when: item.user_state == 'present' and item.servers | intersect(group_names)
  loop: '{{ users }}'
  loop_control:
    label: "username: {{ item.username }}, user_state: {{ item.user_state }}"

# Lock the user if it is unlocked!
- name: Lock users | Lock password
  user:
    name: "{{ item.username }}"
    expires: 0
  when: item.user_state == 'lock' and item.servers | intersect(group_names)
  loop: '{{ users }}'
  loop_control:
    label: "username: {{ item.username }}, user_state: {{ item.user_state }}"


# Add sudo privileges to the user!
- name: Sudo | add to sudoers file and validate
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^{{ item.username }} '
    line: "{{ item.username }} ALL=(ALL) {{ 'NOPASSWD:' if ( item.use_sudo_nopass|d(false) )  else '' }}ALL"
    validate: 'visudo -cf %s'
  environment:
    PATH: /usr/sbin:/usr/local/sbin:/sbin
  when: item.use_sudo|d(false)|bool == true and item.servers | intersect(group_names)
  loop: '{{ users }}'
  loop_control:
    label: "username: {{ item.username }}, use_sudo: {{ item.use_sudo|d(false) }}, use_sudo_nopass: {{ item.use_sudo_nopass|d(false) }}"

# Remove sudo privileges from the user!
- name: Sudo | remove from sudoers file and validate
  lineinfile:
    dest: /etc/sudoers
    state: absent
    regexp: '^{{ item.username }} '
    line: '{{ item.username }}'
    validate: 'visudo -cf %s'
  environment:
    PATH: /usr/sbin:/usr/local/sbin:/sbin
  when: item.use_sudo|d(false)|bool == false and item.servers | intersect(group_names)
  loop: '{{ users }}'
  loop_control:
    label: "username: {{ item.username }}, use_sudo: {{ item.use_sudo|d(false) }}"
